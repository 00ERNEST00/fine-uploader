{% extends "_templates/base.html" %}
{% set page_title = "Styling" %}
{% block content %}
{% markdown %}
# Styling {: .page-header }

{{ alert(
"""Templating changed drastically in version 4.0.  If you are upgrading from a 3.x version to a 4.x version
you will want to read the [upgrading to 4.x document](../upgrading-to-4.html) as well.""", "warn") }}

This document applies to Fine Uploader UI mode only, and aims to help you customize the default UI using
the built-in templating feature.

### Template

A default template, `default-template.html`, is bundled with each version.  In the future, alternate templates may be
included as well.  Note that you must include a template in your markup/document when using Fine Uploader UI.
Everything should work just fine if you simply use the provided template as is, without changing anything.
However, you can certainly customize the default template to match your web application's look and feel.
The rest of this section includes examples of some changes you may want to make to the template.

#### Re-style the progress bar

Don't like the default progress bar included with Fine Uploader's CSS file?  No problem!  You can easily use,
for example, a Bootstrap-styled progress bar.  Just [include Bootstrap](http://getbootstrap.com/)
in your project and change this:

```html
<div class="qq-progress-bar-container-selector">
    <div class="qq-progress-bar-selector qq-progress-bar"></div>
</div>
```

To this:

```html
<div class="qq-progress-bar-container-selector progress">
    <div class="qq-progress-bar-selector bar"></div>
</div>
```


#### Omit a portion of the template that does not apply to your app

TODO

#### Change default text

TODO

#### Re-arrange the order of the template elements

TODO

#### Move the file list to an alternate location in the DOM

TODO

#### Move the default drop zone into the file list

TODO

#### Easily remove/change Fine Uploader UI CSS styles from an element

TODO

#### Customize the buttons/links

TODO

#### Include other custom elements in your template

TODO


### `classes` option

A `classes` option allows you to change some default class names that Fine Uploader may add to template
elements dynamically/on-demand.  The following `classes` option properties exist in Fine Uploader UI mode:

{% macro classes_table(rows, title=None) -%}
{{ code_table(("Property Name", "Default CSS", "Description"), rows, title) }}
{%- endmacro %}

{{ classes_table(
    (
        ("dropActive", "qq-upload-drop-area-active", "Added to the drop area container when an item
        has entered the drop zone."),
        ("editable", "qq-editable", "Added to the file name element when the file name may be edited."),
        ("fail", "qq-upload-fail", "Added to the file item container after a completely failed upload."),
        ("hide", "qq-hide", "Added whenever an item should no longer be visible."),
        ("retryable", "qq-upload-retryable", "Added to the file item container after a failed upload attempt
        if the item is eligible for a retry."),
        ("retrying", "qq-upload-retrying", "Added to the file item container during a retry attempt."),
        ("success", "qq-upload-success", "Added to the file item container after a successful upload."),
    )
) }}

### Dialogs

Fine Uploader UI mode -- by default -- uses the native browser implementations
of alerts, confirms, and messages to show user notifications when necessary.
More than likely, you are going to want to override these. To provide your own
dialogs just provide your own functions for the `showMessage`,  `showConfirm`,
and/or `showPrompt` options.

{{ alert(
"""For a tutorial on integrating the third-party modal dialog library [alertify.js](http://fabien-d.github.io/alertify.js/)
with Fine Uploader's dialogs check out: [Alertify your Notifications and Dialogs](http://wp.me/p3FpYP-5I)."""
)}}

* `showMessage: function(message) {...}` - You may want to change the default alert dialog implementation and messages
as you see fit.  This is possible by overriding the `showMessage` function option.  The default `showMessage` function
simply invokes `alert` with the message text.  One instance in which this is used is when the user attempts to select an
invalid file for upload.  There are general message types with default text that can be overriden as well.
* `showConfirm: function(message, okCallback, cancelCallback) {...}` - This function is used to display a confirm dialog.  One
such feature that optionally uses this is the `deleteFile` feature. Note that **this
is a promissory callback**, meaning it requires a [`qq.Promise`](api/promise.html) to
be returned.The default implementation uses `window.confirm`, but you
may override this with something a bit nicer, if you choose.  The okCallback will be executed if the user clicks "ok" and the
`cancelCallback` if the user clicks "cancel".  The `cancelCallback` is optional, but the `okCallback` is required.
* `showPrompt: function(message, defaultValue) {...}` - This function is used to prompt the user for a value.  Note that **this
is a promissory callback**, meaning it requires a [`qq.Promise`](api/promise.html) to be returned.  The `qq.Promise` documentation
includes a simple example that overrides this default implementation using bootbox.  The default implementation here simply
uses `window.prompt`.

{% endmarkdown %}
{% endblock %}
