{% extends "_templates/base.html" %}
{% block content %}
{% markdown %}
# TODO: Include inherited UI-mode specific options, allow toggle buttons to dictate which options are displayed

## Amazon S3 mode options

<table class='table table-bordered table-striped'>
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Default</th>
            <th>Note</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>debug</td>
            <td>boolean</td>
            <td>false</td>
            <td>If enabled, this will result in log messages (such as server response) being written to the javascript console.
            If your browser does not support the [window.console object](https://developer.mozilla.org/en-USDOM/console.log),
            the value of this option is irrelevant.</td>
        </tr>
        <tr>
            <td>button</td>
            <td>element</td>
            <td>null</td>
            <td>Specify an element to use as the "select files" button.  Note that this may <b>NOT</b> be a &lt;button&gt;,
            otherwise it will not work in Internet Explorer.  Please see issue #33 for details.</td>
        </tr>
        <tr>
            <td>multiple</td>
            <td>boolean</td>
            <td>true</td>
            <td>In FineUploaderBasic mode, this will simply prevent you from simultaneously selecting or dropping more than one file or `Blob`.
            In FineUploader mode, dropping or selecting another file or `Blob` will clear the upload list.  If another is already uploading, it will
            be cancelled.  If you you want Fine Uploader to simply ignore subsequently dropped/selected items, simply return false
            in your <code>onValidate</code> or <code>onSumbit</code> callback handler for any subsequent item that has been dropped.  Note that the behavior
            described for FineUploader mode is in addition to the behavior already provided by FineUploaderBasic mode.</td>
        </tr>
        <tr>
            <td>maxConnections</td>
            <td>integer</td>
            <td>3</td>
            <td>Maximum allowable concurrent requests (per request-type).  For example, if the number is 3, you will be limited to
            3 concurrent deleteFile requests and 3 concurrent upload requests, along with 3 of whatever other request types Fine Uploader supports.</td>
        </tr>
        <tr>
            <td>disableCancelForFormUploads</td>
            <td>boolean</td>
            <td>false</td>
            <td>If true, the cancel link does not appear next to files when the form uploader is used.  This may be desired
            since it may not be possible to interrupt a form-based upload in some cases.</td>
        </tr>
        <tr>
            <td>autoUpload</td>
            <td>boolean</td>
            <td>true</td>
            <td>Set to false if you want to be able to begin uploading selected/queued items later, by calling uploadStoredFiles().</td>
        </tr>
        <tr>
            <td>formatFileName</td>
            <td>function</td>
            <td>(see source code)</td>
            <td>By default, this function limits the name displayed in the UI or error messages to 33 characters,
            plus 3 ellipses separating the first several and the last several characters of the item name.  Override this function
            if you want more control over the display of item names.</td>
        </tr>
    </tbody>
</table>

### `request` option properties:

<table class='table table-bordered table-striped'>
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Default</th>
            <th>Note</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>endpoint</td>
            <td>string (path)</td>
            <td><code>null</code></td>
            <td>This is the fully qualified URL for an S3 bucket, for example: "http://foobar.s3.amazonaws.com",
            or "https://foobar.s3.amazonaws.com" where the bucket is "foobar".  You may also include a specific region
            in your endpoint.  For example, if you have a bucket named "foobar" in the Tokyo region, your endpoint
            should be set to "http://foobar.s3-ap-northeast-1.amazonaws.com".</td>
        </tr>
        <tr>
            <td>successRedirectEndpoint</td>
            <td>string (path)</td>
            <td><code>null</code></td>
            <td>This is required if you plan on supporting browsers that do not implement the File API, such as IE9 and older.
            This must point to a page on the same origin/domain as the page hosting Fine Uploader. A simple, static,
            blank html file is all that is needed here.  If you have a blank page named "blank.html" in the root of your
            web server, you would simply set the value of this option to "/blank.html".</td>
        </tr>
        <tr>
            <td>params</td>
            <td>object</td>
            <td>{}</td>
            <td>Set the parameters sent along with all upload requests to S3.  Parameters are sent along with the file
            in the POST request to S3 via specially named parameters.  For example, if you specify a parameter of
            "foo" with a value of "bar", the POST request to S3 will include a "x-amz-meta-foo" parameter with a value
            of "var".  This parameter will be accounted for by Fine Uploader in the generated policy document as well.
            When retrieving the associated file later, via a GET request, this parameter will be included by Amazon as a
            "x-amz-meta-foo" HEADER in in the response.  Note: You do not have to specify the "x-amz-meta" prefix
            or modify the policy document yourself.  Fine Uploader does all of this for you.</td>
        </tr>
        <tr>
            <td>filenameParam</td>
            <td>string</td>
            <td>qqfilename</td>
            <td>Part of the parameter name, sent with the upload request to S3, that contains the name of the associated
            file, which may differ from the key name.  Note that this parameter name has a "x-amz-meta-" prefix added
            by Fine Uploader, which is required for custom parameters.  See the params option or API method for more
            details regarding parameters.</td>
        </tr>
    </tbody>
</table>

### `validation` option properties:

<table class='table table-bordered table-striped'>
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Default</th>
            <th>Note</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>allowedExtensions</td>
            <td>array of strings</td>
            <td>[]</td>
            <td>This may be helpful if you want to restrict uploaded files to specific file types.  Note that this validation
            option is only enforced by examining the extension of uploaded file names.  For a more complete verification of the
            file type, you should use, for example, magic byte file identification on the server side and return {"success": false}
            in the response if the file type is not on your whitelist.</td>
        </tr>
        <tr>
            <td>acceptFiles</td>
            <td>comma-separated strings</td>
            <td>null</td>
            <td>This option is used solely by the file selection dialog.  If you'd like to restrict valid file types that appear in the
            selection dialog, you can do this here by listing valid content type specifiers.  See the [documentation on the accept
            attribute of the input element](https://developer.mozilla.org/en-USHTML/Element/Input) for more information.</td>
        </tr>
        <tr>
            <td>sizeLimit</td>
            <td>integer</td>
            <td>0 (no limit)</td>
            <td>Maximum allowable size, in bytes, for a file or `Blob`.  Fine Uploader will ask Amazon to enforce this
            as well (server-side) by including it in the generated policy document.</td>
        </tr>
        <tr>
            <td>minSizeLimit</td>
            <td>integer</td>
            <td>0 (no limit)</td>
            <td>Minimum allowable size, in bytes, for a file or `Blob`.Fine Uploader will ask Amazon to enforce this
            as well (server-side) by including it in the generated policy document.</td>
        </tr>
        <tr>
            <td>itemLimit</td>
            <td>integer</td>
            <td>0 (no limit)</td>
            <td>Maximum number of files or blobs that can be potentially uploaded in this session.  Any file or blob will be rejected
            after this limit is reached, unless an uploaded file is deleted or an in progress file fails or is cancelled.  Any
            failed file that is retried after the limit is reached will also be rejected.  If a batch of files is submitted, the entire
            batch will be rejected if allowing all files would exceed the limit.</td>
        </tr>
        <tr>
            <td>stopOnFirstInvalidFile</td>
            <td>boolean</td>
            <td>true</td>
            <td>If true, when submitting multiple files or `Blob` objects, once an item is determined to be invalid, no further
            files in the batch will be processed.  If false, all valid items in the batch will be processed.  Note: One downside to a false value can be
            seen when using FineUploader if the default <code>showMessage</code> implementation is not overriden.  In this
            case, an alert  dialog will appear for each invalid item in the batch, and the upload process will not continue
            until the dialog is dismissed.  If this is bothersome, simply override <code>showMessage</code> with a
            desirable implementation.
        </tr>
    </tbody>
</table>

### `messages` option properties:

<table class='table table-bordered table-striped'>
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Default</th>
            <th>Note</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>typeError</td>
            <td>string</td>
            <td>{file} has an invalid extension. Valid extension(s): {extensions}.</td>
            <td>Text sent to the `onError` callback (and `showMessage` if running in FineUploader mode) if an invalid file type
            is submitted, according to the validation settings.</td>
    	</tr>
        <tr>
            <td>sizeError</td>
            <td>string</td>
            <td>{file} is too large, maximum file size is {sizeLimit}.</td>
            <td>Text sent to the `onError` callback (and `showMessage` if running in FineUploader mode) if a file or `Blob` that is
            too large, according to the validation settings, is submitted.</td>
    	</tr>
        <tr>
            <td>minSizeError</td>
            <td>string</td>
            <td>{file} is too small, minimum file size is {minSizeLimit}.</td>
            <td>Text sent to the `onError` callback (and `showMessage` if running in FineUploader mode) if a file or `Blob` that is
            too small, according to the validation settings, is submitted.</td>
    	</tr>
        <tr>
            <td>emptyError</td>
            <td>string</td>
            <td>{file} is empty, please select files again without it.</td>
            <td>Text sent to the `onError` callback (and `showMessage` if running in FineUploader mode) if a zero-sized
            file or `Blob` is submitted.</td>
    	</tr>
        <tr>
            <td>noFilesError</td>
            <td>string</td>
            <td>No files to upload.</td>
            <td>Text sent to the `onError` callback (and `showMessage` if running in FineUploader mode) if a an empty
            array of files or `Blob` objects is submitted.</td>
    	</tr>
        <tr>
            <td>onLeave</td>
            <td>string</td>
            <td>The files are being uploaded, if you leave now the upload will be cancelled.</td>
            <td>Message display to the user (by the browser) if the user attempts to leave the page while uploads are still
            in progress.</td>
    	</tr>
    </tbody>
</table>

### `retry` option properties:

<table class='table table-bordered table-striped'>
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Default</th>
            <th>Note</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>enableAuto</td>
            <td>boolean</td>
            <td>false</td>
            <td>If set to <code>true</code>, any error or non-200 response will prompt the uploader to automatically
            attempt to upload the file or `Blob` again.</td>
        </tr>
        <tr>
            <td>maxAutoAttempts</td>
            <td>number</td>
            <td>3</td>
            <td>The maximum number of times the uploader will attempt to retry a failed upload.  Ignored if <code>enableAuto</code>
            is <code>false</code>.</td>
        </tr>
        <tr>
            <td>autoAttemptDelay</td>
            <td>number</td>
            <td>5</td>
            <td>The number of seconds the uploader will wait in between automatic retry attempts.  Ignored if <code>enableAuto</code>
            is <code>false</code>.</td>
        </tr>
        <tr>
            <td>preventRetryResponseProperty</td>
            <td>string</td>
            <td>preventRetry</td>
            <td>If this property is present in the server response and contains a value of <code>true</code>, the uploader
            will not allow any further retries of this file or `Blob` (manual or automatic).</td>
        </tr>
    </tbody>
</table>

### `text` option properties:

<table class='table table-bordered table-striped'>
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Default</th>
            <th>Note</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>defaultResponseError</td>
            <td>String</td>
            <td>Upload failure reason unknown</td>
            <td>Message sent to the <code>onError</code> callback if no specific information about the error can be determined.  This is used if the server
            indicates failure in the response but does not include an "error" property in the response and the error code is 200 (XHR only).</td>
        </tr>
        <tr>
            <td>sizeSymbols</td>
            <td>array of strings</td>
            <td>['kB', 'MB', 'GB', 'TB', 'PB', 'EB']</td>
            <td>Symbols used to represent file size, in ascending order.</td>
        </tr>
    </tbody>
</table>

### `deleteFile` option properties:

For more information on the Delete File feature, please read the [associated blog post](http://blog.fineuploader.com/2013/01/25/delete-an-uploaded-file-in-3-3/) and
check out the server-side readme.  If you want to support this feature in IE9 and IE8 for cross-origin environments, please
read about the [changes that occurred in 3.7 that optionally allow this](http://blog.fineuploader.com/2013/06/09/3-7-cross-origin-delete-file-support-for-ie9-and-ie8/).
Please note that the S3 bucket name and the associated key name will also be passed as parameters along with this request.

<table class='table table-bordered table-striped'>
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Default</th>
            <th>Note</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>enabled</td>
            <td>boolean</td>
            <td>false</td>
            <td>Set this to true if you would like to allow users to delete uploaded files.  In FineUploader mode,
            this will also render a "delete" link next to each successfully uploaded file or `Blob`.</td>
        </tr>
        <tr>
            <td>method</td>
            <td>string</td>
            <td>DELETE</td>
            <td>You can choose between a POST and a DELETE method for the delete file request sent by Fine Uploader.
             Keep in mind that you should be using "POST" if you want to help ensure that the request will not be preflighted.
             Please see the <a href="http://blog.fineuploader.com/2013/06/05/delete-files-via-post-and-delete-requests/">blog post
             that describes how the delete file feature requests are constructed</a> based on the value of this option.</td>
        </tr>
        <tr>
            <td>endpoint</td>
            <td>string</td>
            <td>/server/upload</td>
            <td>This should be the endpoint to where any delete file request should be sent.</td>
        </tr>
        <tr>
            <td>customHeaders</td>
            <td>object</td>
            <td>{}</td>
            <td>Any additional headers to attach to all delete file requests.  Note that you should generally avoid sending any
             additional headers if you are using the "POST" verb to send this method, as this will require the browser to
             preflight the request.  Also note that these headers will not be sent in IE9 and older if you are allowing
             XDR requests in a cross-origin environment.</td>
        </tr>
        <tr>
            <td>params</td>
            <td>object</td>
            <td>{}</td>
            <td>Any additional parameters to attach to delete file requests.  This works the exact same way as the
            <code>params</code> property of the <code>request</code> option.  Note that all parameters are sent in the
            query string for DELETE requests and the request body for POST requests.</td>
        </tr>
    </tbody>
</table>

### `cors` option properties:

For more information on CORS support, please read the [associated blog post](http://blog.fineuploader.com/2013/01/31/cors-support-in-3-3/) and
check out the server-side readme.  Note that this only applies to requests between Fine Uploader and your server(s)
(not S3), as all requests to S3 are ALWAYS cross-origin.  If you are not expected any CORS requests between Fine Uploader
and your servers, you can ignore this option entirely.

<table class='table table-bordered table-striped'>
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Default</th>
            <th>Note</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>expected</td>
            <td>boolean</td>
            <td>false</td>
            <td>Set this to true if all requests will be cross-domain requests.</td>
        </tr>
        <tr>
            <td>sendCredentials</td>
            <td>boolean</td>
            <td>false</td>
            <td>Set this to true if you would like credentials (i.e. cookies) sent along with each CORS request.  Your response must,
            as a result, include the appropriate headers.  Note that this is ignored if `XDomainRequest` is being used
             as it does not support credentialed cross-origin requests.</td>
         </tr>
         <tr>
             <td>allowXdr</td>
             <td>boolean</td>
             <td>false</td>
             <td>Set this to true if you would like to allow Fine Uploader to send cross-origin requests
             from IE9 and older, where XDomainRequest must be used to handle these types of requests.</td>
        </tr>
    </tbody>
</table>

### `blobs` option properties:

Options used when `Blob` objects are to be uploaded.

<table class='table table-bordered table-striped'>
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Default</th>
            <th>Note</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>defaultName</td>
            <td>string</td>
            <td>Misc data</td>
            <td>If you do not include a name along with the `Blob` submitted to the uploader (via a `BlobData` object) this
            default name will be used.</td>
        </tr>
    </tbody>
</table>

### `paste` option properties:

Currently, only pasting images (from the web) is supported, and only in Chrome.

<table class='table table-bordered table-striped'>
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Default</th>
            <th>Note</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>targetElement</td>
            <td>element</td>
            <td><code>null</code></td>
            <td>To enable this feature, set this to a non-null value (an element) that will receive pasted images.  Typically,
            this would be some visible box, also containing the file list, where the user has been instructed to paste web
            images.  In some applications, this may simply be the entire <code>document</code>, though.</td>
    	</tr>
        <tr>
            <td>defaultName</td>
            <td>string</td>
            <td>pasted_image</td>
            <td>If no name is supplied via the `onPasteReceived` or other means, this will be the name associated with
            pasted images.  Note that an appropriate extension will always been appended to this name automatically.</td>
    	</tr>
    </tbody>
</table>

### `camera` option properties:

Options specific to camera access.

<table class='table table-bordered table-striped'>
    <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Default</th>
            <th>Note</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>ios</td>
            <td>boolean</td>
            <td><code>false</code></td>
            <td>Set this to true to enable camera access on iOS (iPod, iPhone, iPad) devices.  Note that, due to limitations
            related to camera access in iOS, setting this to true will prevent you from selecting multiple files at once.
            Please see <a href="http://blog.fineuploader.com/2013/05/09/upload-directly-via-a-camera-on-mobile-devices/">the associated blog post</a>
            for more details on the implementation
            of this feature.</td>
    	</tr>
    </tbody>
</table>
{% endmarkdown %}
{% endblock %}
